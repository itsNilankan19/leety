You are given a 0-indexed array words containing n strings.
Let's define a join operation join(x, y) between two strings x and y as concatenating them into xy. However, if the last character of x is equal to the first character of y, one of them is deleted. For example join("ab", "ba") = "aba" and join("ab", "cde") = "abcde".
You are to perform n - 1 join operations. Let str0 = words[0]. Starting from i = 1 up to i = n - 1, for the ith operation, you can do one of the following:
Make stri = join(stri - 1, words[i])
Make stri = join(words[i], stri - 1)
Your task is to minimize the length of strn - 1.

Return an integer denoting the minimum possible length of strn - 1.

 

Example 1:

Input: words = ["aa","ab","bc"]
Output: 4
Explanation: In this example, we can perform join operations in the following order to minimize the length of str2: 
str0 = "aa"
str1 = join(str0, "ab") = "aab"
str2 = join(str1, "bc") = "aabc" 
It can be shown that the minimum possible length of str2 is 4.
Example 2:

Input: words = ["ab","b"]
Output: 2
Explanation: In this example, str0 = "ab", there are two ways to get str1: 
join(str0, "b") = "ab" or join("b", str0) = "bab". 
The first string, "ab", has the minimum length. Hence, the answer is 2.
Example 3:

Input: words = ["aaa","c","aba"]
Output: 6
Explanation: In this example, we can perform join operations in the following order to minimize the length of str2: 
str0 = "aaa"
str1 = join(str0, "c") = "aaac"
str2 = join("aba", str1) = "abaaac"
It can be shown that the minimum possible length of str2 is 6.
 
 

Constraints:

1 <= words.length <= 1000
1 <= words[i].length <= 50
Each character in words[i] is an English lowercase letter







Soln :-


Java
class Solution {
    Integer[][][] dp;
    public int minimizeConcatenatedLength(String[] words) {
        dp= new Integer[words.length + 1][27][27];
        return words[0].length() + helper(1 , words[0].charAt(0) , words[0].charAt(words[0].length() - 1) , words);
    }
    
    public int helper(int i , char first , char last , String[] words){
        if( i >= words.length) 
        return 0;
        
        if(dp[i][first - 'a'][last - 'a'] != null) return dp[i][first - 'a'][last - 'a'];
        int a = 0;
        int b = 0;
        if(first == words[i].charAt(words[i].length() - 1)){
            a = words[i].length() - 1 + helper(i + 1 , words[i].charAt(0) , last , words);
        }
        else
            a = words[i].length() + helper(i + 1 , words[i].charAt(0) , last , words);
        
        if(last == words[i].charAt(0)){
            b = words[i].length() - 1 + helper(i + 1 , first , words[i].charAt(words[i].length() - 1) , words);
        }
        else
            b = words[i].length() + helper(i + 1 , first , words[i].charAt(words[i].length() - 1) , words);
        
        return dp[i][first - 'a'][last - 'a'] = Math.min(a , b);
    }
}

C++
class Solution {
public:
    int dp[1000][26][26];
    int dfs(vector<string> &v, int start, int end, int i) {
        if(i >= v.size()) return 0;
        if(dp[i][start][end] != -1) return dp[i][start][end];
        int ans = 1e9;
        ans = min(ans,(int)v[i].size() - (end + 'a' == v[i][0]) + dfs(v, start, v[i].back() - 'a', i + 1));
        ans = min(ans,(int)v[i].size() - (start + 'a' == v[i].back()) + dfs(v, v[i][0] - 'a', end, i + 1));
        return dp[i][start][end] = ans;
    }
    
    int minimizeConcatenatedLength(vector<string>& v) {
        memset(dp, -1, sizeof(dp));
        return v[0].size() + dfs(v, v[0][0] - 'a', v[0].back() - 'a', 1);
    }
};
