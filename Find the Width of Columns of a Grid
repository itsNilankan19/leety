You are given a 0-indexed m x n integer matrix grid. The width of a column is the maximum length of its integers.
For example, if grid = [[-10], [3], [12]], the width of the only column is 3 since -10 is of length 3.
Return an integer array ans of size n where ans[i] is the width of the ith column.
The length of an integer x with len digits is equal to len if x is non-negative, and len + 1 otherwise.


Example 1:

Input: grid = [[1],[22],[333]]
Output: [3]
Explanation: In the 0th column, 333 is of length 3.


Example 2:

Input: grid = [[-15,1,3],[15,7,12],[5,6,-2]]
Output: [3,1,2]
Explanation: 
In the 0th column, only -15 is of length 3.
In the 1st column, all integers are of length 1. 
In the 2nd column, both 12 and -2 are of length 2.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100 
-109 <= grid[r][c] <= 109





Soln :-


Java
class Solution {
    public int[] findColumnWidth(int[][] grid) {
        int [] arr = new int[grid[0].length];
        for(int i=0; i<grid[0].length; i++){
            for(int j=0; j<grid.length; j++){
                arr[i] = Math.max(arr[i],String.valueOf(grid[j][i]).length());
            }
        }
        return arr;
    }
}

C++
class Solution {
public:
    vector<int> findColumnWidth(vector<vector<int>>& grid) {
        int m = grid.size(),n=grid[0].size(),i,j;
        vector<int> ans(n);
        int y=0;
        for(i = 0; i < m; i++){
            for(j = 0; j < n; j++){
                y = 0;
                if(grid[i][j]<0 || grid[i][j]==0){y++;grid[i][j]*=-1;}
                while(grid[i][j]>0){
                    y++;
                    grid[i][j] /= 10;
                }
                ans[j] = max(ans[j],y);
            }
        }
        return ans;
    }
};
