Given a 0-indexed 2D grid of size m x n, you should find the matrix answer of size m x n.
The value of each cell (r, c) of the matrix answer is calculated in the following way:
Let topLeft[r][c] be the number of distinct values in the top-left diagonal of the cell (r, c) in the matrix grid.
Let bottomRight[r][c] be the number of distinct values in the bottom-right diagonal of the cell (r, c) in the matrix grid.
Then answer[r][c] = |topLeft[r][c] - bottomRight[r][c]|.
Return the matrix answer.
A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end.
A cell (r1, c1) belongs to the top-left diagonal of the cell (r, c), if both belong to the same diagonal and r1 < r. Similarly is defined bottom-right diagonal.

 

Example 1:

Input: grid = [[1,2,3],[3,1,5],[3,2,1]]
Output: [[1,1,0],[1,0,1],[0,1,1]]
Explanation: The 1st diagram denotes the initial grid. 
The 2nd diagram denotes a grid for cell (0,0), where blue-colored cells are cells on its bottom-right diagonal.
The 3rd diagram denotes a grid for cell (1,2), where red-colored cells are cells on its top-left diagonal.
The 4th diagram denotes a grid for cell (1,1), where blue-colored cells are cells on its bottom-right diagonal and red-colored cells are cells on its top-left diagonal.
- The cell (0,0) contains [1,1] on its bottom-right diagonal and [] on its top-left diagonal. The answer is |1 - 0| = 1.
- The cell (1,2) contains [] on its bottom-right diagonal and [2] on its top-left diagonal. The answer is |0 - 1| = 1.
- The cell (1,1) contains [1] on its bottom-right diagonal and [1] on its top-left diagonal. The answer is |1 - 1| = 0.
The answers of other cells are similarly calculated.


Example 2:

Input: grid = [[1]]
Output: [[0]]
Explanation: - The cell (0,0) contains [] on its bottom-right diagonal and [] on its top-left diagonal. The answer is |0 - 0| = 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n, grid[i][j] <= 50






Soln :-


Java
class Solution {
    public int[][] differenceOfDistinctValues(int[][] grid) {
               int m = grid.length;
        int n = grid[0].length;
        int[][] res=new int[m][n];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                res[i][j]=calculate(grid,i,j);
            }
        }
        return res;
    }
    
    int calculate(int[][] arr,int i,int j){
        int r1=i;
        int r2=i;
        int c1=j;
        int c2=j;
        
        HashSet<Integer> hs1=new HashSet(); 
        HashSet<Integer> hs2=new HashSet(); 
        
        while(r1>0 && c1>0){
            hs1.add(arr[--r1][--c1]);
        }
        
        while(r2<arr.length-1 && c2<arr[0].length-1){
            hs2.add(arr[++r2][++c2]);
        }
        return Math.abs(hs1.size()-hs2.size());
    }
}

C++
class Solution {
public:
    vector<vector<int>> differenceOfDistinctValues(vector<vector<int>>& grid) {
     int m =grid.size(),n=grid[0].size();
     vector<vector<int>> ans(m, vector<int>(n, 0));
     for (int r = 0; r < m; r++) {
        for (int c = 0; c < n; c++) {
            unordered_set<int> tl, br;
			//for top left 
            for (int i = r - 1, j = c - 1; i >= 0 && j >= 0; i--, j--) {
                tl.insert(grid[i][j]);
            }
			//for bottom right
            for (int i = r + 1, j = c + 1; i < m && j < n; i++, j++) {
                br.insert(grid[i][j]);
            }
            int x= tl.size() - br.size();
            ans[r][c] =abs(x);
        }
    }

    return ans;
    }
};
