You are given a 0-indexed 2D integer array nums representing the coordinates of the cars parking on a number line. For any index i, nums[i] = [starti, endi] where starti is the starting point of the ith car and endi is the ending point of the ith car.

Return the number of integer points on the line that are covered with any part of a car.

 

Example 1:

Input: nums = [[3,6],[1,5],[4,7]]
Output: 7
Explanation: All the points from 1 to 7 intersect at least one car, therefore the answer would be 7.
Example 2:

Input: nums = [[1,3],[5,8]]
Output: 7
Explanation: Points intersecting at least one car are 1, 2, 3, 5, 6, 7, 8. There are a total of 7 points, therefore the answer would be 7.
 

Constraints:

1 <= nums.length <= 100
nums[i].length == 2
1 <= starti <= endi <= 100






Soln :-

Java
class Solution {
    public int numberOfPoints(List<List<Integer>> nums) {
        int sz = nums.size();
        
        int []pref = new int[200];
        
        for(var num : nums){
            pref[num.get(0)] += 1;
            pref[num.get(1)+1] -= 1;
        }
     
        for(int indx = 0; indx < pref.length; indx++){
           if(indx != 0) 
            pref[indx] += pref[indx-1];
        }
       
        int zeros = count(pref, 0);
      
        return 200 - zeros;
    }
    private int count(int pref[], int val){
        int cnt = 0;
        for(var num : pref){
            if(num == val)cnt++;
        }
        return cnt;
    }
}

C++
class Solution {
public:
    int numberOfPoints(vector<vector<int>>& nums) {
        int sz = nums.size();
        vector<int> pref(200);

        for(auto &num : nums){
            pref[num[0]] += 1;
            pref[num[1]+1] -= 1;
        }

        for(int indx = 0; indx < pref.size(); indx++){
           if(indx != 0) 
            pref[indx] += pref[indx-1];
        }

        int zeros = count(pref.begin(), pref.end(), 0);

        return pref.size() - zeros;
    }
};
