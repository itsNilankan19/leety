There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.
Return the length of the shortest cycle in the graph. If no cycle exists, return -1. A cycle is a path that starts and ends at the same node, and each edge in the path is used only once.

 

Example 1:

Input: n = 7, edges = [[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]
Output: 3
Explanation: The cycle with the smallest length is : 0 -> 1 -> 2 -> 0 


Example 2:

Input: n = 4, edges = [[0,1],[0,2]]
Output: -1
Explanation: There are no cycles in this graph.
 

Constraints:

2 <= n <= 1000
1 <= edges.length <= 1000
edges[i].length == 2
0 <= ui, vi < n
ui != vi
There are no repeated edges.






Soln :-


Java
class Solution {
    public int findShortestCycle(int n, int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0;i<n;i++)
        adj.add(new ArrayList<Integer>());
        
        for(int edge[]: edges){
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        
        int ans = Integer.MAX_VALUE;
 
        for (int i = 0; i < n; i++)
        {
            int[] dist = new int[n];
            Arrays.fill(dist, (int) 1e9);
 
            int[] par = new int[n];
            Arrays.fill(par, -1);
 
            dist[i] = 0;
            Queue<Integer> q = new LinkedList<>();
 
            q.add(i);
 
            while (!q.isEmpty())
            {
 
                // Take the first element
                int x = q.poll();
 
                // Traverse for all it's childs
                for (int child : adj.get(x))
                {
                    // If it is not visited yet
                    if (dist[child] == (int) (1e9))
                    {
 
                        // Increase distance by 1
                        dist[child] = 1 + dist[x];
 
                        // Change parent
                        par[child] = x;
 
                        // Push into the queue
                        q.add(child);
                    } else if (par[x] != child && par[child] != x)
                        ans = Math.min(ans, dist[x] + dist[child] + 1);
                }
            }
        }
 
        // If graph contains no cycle
        if (ans == Integer.MAX_VALUE)
            return -1;
 
        // If graph contains cycle
        else
            return ans;
    }
}

C++
class Solution {
public:
    int findShortestCycle(int n, vector<vector<int>>& edges) {
        //show in which order the edges are visited
        int ans=INT_MAX;
        vector<vector<int>> adj(n);
        for(auto e:edges){
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        queue<int> q;
        
        for(int i=0;i<n;i++){
            vector<int> visited(n,INT_MAX);
            vector<int> parent(n, -1);
            visited[i]=0;
            q.push(i);
            while(!q.empty()){
                int src=q.front();q.pop();
                for(auto nbr:adj[src]){
                    if(visited[nbr]==INT_MAX){
                        visited[nbr]=visited[src]+1;
                        parent[nbr]=src;
                        q.push(nbr);
                    }
                    else{
                        if(parent[src]==nbr ||parent[nbr]==src) continue;
                        ans=min(ans, abs(visited[src]+visited[nbr])+1);
                    }
                }
            }
            
            
        }
        
        return ans==INT_MAX?-1:ans;
    }
};
