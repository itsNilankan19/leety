Given an integer array nums containing n integers, find the beauty of each subarray of size k. The beauty of a subarray is the xth smallest integer in the subarray if it is negative, or 0 if there are fewer than x negative integers.
Return an integer array containing n - k + 1 integers, which denote the beauty of the subarrays in order from the first index in the array. A subarray is a contiguous non-empty sequence of elements within an array.
 

Example 1:

Input: nums = [1,-1,-3,-2,3], k = 3, x = 2
Output: [-1,-2,-2]
Explanation: There are 3 subarrays with size k = 3. 
The first subarray is [1, -1, -3] and the 2nd smallest negative integer is -1. 
The second subarray is [-1, -3, -2] and the 2nd smallest negative integer is -2. 
The third subarray is [-3, -2, 3] and the 2nd smallest negative integer is -2.


Example 2:

Input: nums = [-1,-2,-3,-4,-5], k = 2, x = 2
Output: [-1,-2,-3,-4]
Explanation: There are 4 subarrays with size k = 2.
For [-1, -2], the 2nd smallest negative integer is -1.
For [-2, -3], the 2nd smallest negative integer is -2.
For [-3, -4], the 2nd smallest negative integer is -3.
For [-4, -5], the 2nd smallest negative integer is -4. 


Example 3:

Input: nums = [-3,1,2,-3,0,-3], k = 2, x = 1
Output: [-3,0,-3,-3,-3]
Explanation: There are 5 subarrays with size k = 2.
For [-3, 1], the 1st smallest negative integer is -3.
For [1, 2], there is no negative integer so the beauty is 0.
For [2, -3], the 1st smallest negative integer is -3.
For [-3, 0], the 1st smallest negative integer is -3.
For [0, -3], the 1st smallest negative integer is -3.
 

Constraints:

n == nums.length 
1 <= n <= 105
1 <= k <= n
1 <= x <= k 
-50 <= nums[i] <= 50 






Soln :-


Java
class Solution {
    public int[] getSubarrayBeauty(int[] nums, int k, int x) {
        int n = nums.length;
        int[] rslt = new int[n-k+1];
        
        int[] bucket = new int[101];
        
        for(int i = 0; i < k; i++){
            int elem = nums[i];
            int bktidx = elem + 50;
            bucket[bktidx]++;
        }
        
        rslt[0] = getBucket(bucket, x);
        for(int i = k; i < n; i++){
            int outgoing = nums[i-k];
            int outbktidx = outgoing + 50;
            bucket[outbktidx]--;
            
            int incoming = nums[i];
            int inxbktidx = incoming + 50;
            bucket[inxbktidx]++;
            
            rslt[i-k+1] = getBucket(bucket, x);
        }
        return rslt;
    }
    private int getBucket(int[] bucket, int x){
        int cnt = 0;
        for(int i = 0; i < bucket.length; i++){
            int frqi = bucket[i];
            if (cnt + frqi >= x){
                return Math.min(0, i-50);
            } 
            cnt += frqi;
        }
        return 0;
    }
}

C++
#include<iostream>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 

using namespace __gnu_pbds; 
using namespace std;

typedef tree<int,null_type,less_equal<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
class Solution {
public:
    void myerase(ordered_set &t, int v){
    int rank = t.order_of_key(v);
    ordered_set::iterator it = t.find_by_order(rank);
    t.erase(it);
}
    vector<int> getSubarrayBeauty(vector<int>& nums, int k, int x) {
        ordered_set st;
        int i=0,j=0;
        vector<int> ans;
        while(j<nums.size())
        {
            if(nums[j]<0)
            st.insert(nums[j]);
            if(j-i+1==k)
            {
                if(st.size()<x)
                ans.push_back(0);
                else
                {
                    auto temp = st.find_by_order(x-1);
                    ans.push_back(*temp);
                }
                if(nums[i]<0)
                myerase(st,nums[i]);
                i++;
            }
            j++;
        }
        return ans;
    }
};
