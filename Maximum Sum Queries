You are given two 0-indexed integer arrays nums1 and nums2, each of length n, and a 1-indexed 2D array queries where queries[i] = [xi, yi].
For the ith query, find the maximum value of nums1[j] + nums2[j] among all indices j (0 <= j < n), where nums1[j] >= xi and nums2[j] >= yi, or -1 if there is no j satisfying the constraints. Return an array answer where answer[i] is the answer to the ith query.
 

Example 1:

Input: nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]]
Output: [6,10,7]
Explanation: 
For the 1st query xi = 4 and yi = 1, we can select index j = 0 since nums1[j] >= 4 and nums2[j] >= 1. The sum nums1[j] + nums2[j] is 6, and we can show that 6 is the maximum we can obtain.
For the 2nd query xi = 1 and yi = 3, we can select index j = 2 since nums1[j] >= 1 and nums2[j] >= 3. The sum nums1[j] + nums2[j] is 10, and we can show that 10 is the maximum we can obtain. 
For the 3rd query xi = 2 and yi = 5, we can select index j = 3 since nums1[j] >= 2 and nums2[j] >= 5. The sum nums1[j] + nums2[j] is 7, and we can show that 7 is the maximum we can obtain. Therefore, we return [6,10,7].


Example 2:

Input: nums1 = [3,2,5], nums2 = [2,3,4], queries = [[4,4],[3,2],[1,1]]
Output: [9,9,9]
Explanation: For this example, we can use index j = 2 for all the queries since it satisfies the constraints for each query.


Example 3:

Input: nums1 = [2,1], nums2 = [2,3], queries = [[3,3]]
Output: [-1]
Explanation: There is one query in this example with xi = 3 and yi = 3. For every index, j, either nums1[j] < xi or nums2[j] < yi. Hence, there is no solution. 
 

Constraints:

nums1.length == nums2.length 
n == nums1.length 
1 <= n <= 105
1 <= nums1[i], nums2[i] <= 109 
1 <= queries.length <= 105
queries[i].length == 2
xi == queries[i][1]
yi == queries[i][2]
1 <= xi, yi <= 109






Soln :-


Java
class Solution {
    public int[] maximumSumQueries(int[] a1, int[] a2, int[][] queries) {
        int n = a1.length;
        int a[][] = new int[n][2];
        for(int i = 0; i < n; i++){
            a[i][0] = a1[i];
            a[i][1] = a2[i];
        }
        Arrays.sort(a2);
        hm = new TreeMap<>();
        int k = 0;
        for(int i = 0; i < n; i++)
            if(!hm.containsKey(a2[i]))
                hm.put(a2[i], k++);
        
        Arrays.sort(a, 
            new Comparator<int[]>(){
                public int compare(int x[], int y[]){
                    return x[0] - y[0];
                }
            }
        );
        
        for(int i = 0; i < queries.length; i++){
            queries[i] = new int[]{queries[i][0], queries[i][1], i};
        }
        Arrays.sort(queries,
            new Comparator<int[]>(){
                public int compare(int x[], int y[]){
                    return -x[0] + y[0];
                }
            }
        );
        int max = 0;
        int ans[] = new int[queries.length];
        int j = 0;
        int i = a.length - 1;
        
        seg = new int[4 * hm.size() + 4];
        Arrays.fill(seg, -1);
        while(j < queries.length){
            while(i > -1 && a[i][0] >= queries[j][0]){
                update(0, hm.size() - 1, hm.get(a[i][1]), a[i][0] + a[i][1], 0);
                i--;
            }
            
            if(hm.ceilingKey(queries[j][1]) == null){
                ans[queries[j][2]] = -1;
            } else{
                ans[queries[j][2]] = find(0, hm.size() - 1, hm.ceilingEntry(queries[j][1]).getValue(), hm.size() - 1, 0);
            }
            j++;
        }
        while(j < queries.length)
            ans[queries[j++][2]] = -1;
        return ans;
    }
    private void update(int low, int high, int ind, int val, int node){
        if(low == high){
            seg[node] = Math.max(seg[node], val);
            return;
        }
        int mid = (low + high) >> 1;
        if(ind <= mid)
            update(low, mid, ind, val, 2 * node + 1);
        else
            update(mid + 1, high, ind, val, 2 * node + 2);
        seg[node] = Math.max(seg[2 * node + 1], seg[2 * node + 2]);
    }
    private int find(int low, int high, int l, int r, int node){
        if(low > r || high < l)
            return -1;
        if(low >= l && high <= r)
            return seg[node];
        int mid = (low + high) >> 1;
        return Math.max(find(low, mid, l, r, 2 * node + 1), find(mid + 1, high, l, r, 2 * node + 2));
    }
    private int seg[];
    private TreeMap<Integer, Integer> hm;
}

C++
struct SegmentTree {
    vector<int> tree;
    int size;
    
    SegmentTree(int n) {
        size = 1;
        while (size < n) size *= 2;
        tree.assign(2*size - 1, INT_MIN);
    }

    void build(vector<int>& a, int x, int lx, int rx) {
        if (rx - lx == 1) {
            if (lx < a.size()) tree[x] = a[lx];
            return;
        }
        int m = lx + (rx - lx) / 2;
        build(a, 2*x + 1, lx, m);
        build(a, 2*x + 2, m, rx);
        tree[x] = max(tree[2*x + 1], tree[2*x + 2]);
    }

    void build(vector<int>& a) {
        build(a, 0, 0, size);
    }

    int query(int l, int r, int x, int lx, int rx) {
        if (lx >= r || l >= rx) return INT_MIN;
        if (lx >= l && rx <= r) return tree[x];
        int m = lx + (rx - lx) / 2;
        int leftMax = query(l, r, 2*x + 1, lx, m);
        int rightMax = query(l, r, 2*x + 2, m, rx);
        return max(leftMax, rightMax);
    }

    int query(int l, int r) {
        return query(l, r, 0, 0, size);
    }
    
    void update(int i, int v, int x, int lx, int rx) {
        if (rx - lx == 1) {
            tree[x] = max(tree[x], v);
            return;
        }
        int m = lx + (rx - lx) / 2;
        if (i < m) {
            update(i, v, 2*x + 1, lx, m);
        } else {
            update(i, v, 2*x + 2, m, rx);
        }
        tree[x] = max(tree[2*x + 1], tree[2*x + 2]);
    }

    void update(int i, int v) {
        update(i, v, 0, 0, size);
    }
};

class Solution {
public:
	// sort by width, followed by height, followed by data vs. query
    static bool comp(vector<int> &a, vector<int> &b){
        if(a[0]==b[0]){
            if (a[1] == b[1]) {
                return a[2] > b[2];
            }
            return a[1]<b[1];
        }
        return a[0]<b[0];
    }
    vector<int> maximumSumQueries(vector<int>& nums1, vector<int>& nums2, vector<vector<int>>& queries) {
        vector<vector<int>> envelopes;
        
        set<int> rv;
		// insert both data and query into envelopes array
		// remember to store their heights in an ordered set for mapping
        for (int i = 0; i < nums1.size(); ++i) {
            envelopes.push_back({nums1[i], nums2[i], -1});
            rv.insert(nums2[i]);
        }
        for (int i = 0; i < queries.size(); ++i) {
            envelopes.push_back({queries[i][0], queries[i][1], i});
            rv.insert(queries[i][1]);
        }       
        sort(envelopes.begin(), envelopes.end(), comp);
        reverse(envelopes.begin(), envelopes.end());
        
		// generate the mapping for height to index
        unordered_map<int, int> mapping;
        int counter = 0;
        for (auto e: rv) {
            mapping[e] = counter;
            counter++;
        }
        
		// create a segment tree with the size of set of heights
        SegmentTree st(counter);
        vector<int> ans(queries.size());
        for (auto envelope: envelopes) {
            if (envelope[2] != -1) {
				// if it is a query, check the segment tree
                int val = st.query(mapping[envelope[1]], counter);
                ans[envelope[2]] = val == INT_MIN ? -1 : val;
            } else {
			    // if it is data, insert into the segment tree
                st.update(mapping[envelope[1]], envelope[0] + envelope[1]);
            } 
        }
        
        return ans;
    }
};
