You are given an integer n. There is an undirected graph with n vertices, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting vertices ai and bi. Return the number of complete connected components of the graph.
A connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph. A connected component is said to be complete if there exists an edge between every pair of its vertices.
 

Example 1:

Input: n = 6, edges = [[0,1],[0,2],[1,2],[3,4]]
Output: 3
Explanation: From the picture above, one can see that all of the components of this graph are complete.


Example 2:

Input: n = 6, edges = [[0,1],[0,2],[1,2],[3,4],[3,5]]
Output: 1
Explanation: The component containing vertices 0, 1, and 2 is complete since there is an edge between every pair of two vertices. On the other hand, the component containing vertices 3, 4, and 5 is not complete since there is no edge between vertices 4 and 5. Thus, the number of complete components in this graph is 1.
 

Constraints:

1 <= n <= 50
0 <= edges.length <= n * (n - 1) / 2
edges[i].length == 2
0 <= ai, bi <= n - 1
ai != bi
There are no repeated edges.






Soln :-


Java
class Solution {
    Set<Integer> vis = new HashSet<>();
    Map<Integer, Set<Integer>> nodes;
    public int countCompleteComponents(int n, int[][] edges) {
        nodes = buidGraph(edges);
        int result = 0;
        for (int i = 0; i < n; i++) {
            if (vis.contains(i)) continue;
            if (bfs(i)) result++;
        }
        return result;
    }

    private Map<Integer, Set<Integer>> buidGraph(int[][] edges) {
        Map<Integer, Set<Integer>> nodes = new HashMap<>();
        for (int[] e : edges) {
            nodes.putIfAbsent(e[0], new HashSet<>());
            nodes.putIfAbsent(e[1], new HashSet<>());
            nodes.get(e[0]).add(e[1]);
            nodes.get(e[1]).add(e[0]);
        }
        return nodes;
    }

    private boolean bfs(int i) {
        Queue<Integer> q = new LinkedList<>();
        q.offer(i);
        vis.add(i);
        int cntOfNeighs = nodes.getOrDefault(i, new HashSet<>()).size(), numOfNodes = 0;
        boolean result = true;
        while (!q.isEmpty()) {
            int curr = q.poll();
            numOfNodes++;
            if (nodes.getOrDefault(curr, new HashSet<>()).size() != cntOfNeighs) result = false;
            for (int neig : nodes.getOrDefault(curr, new HashSet<>())) {
                if (vis.contains(neig)) continue;
                vis.add(neig);
                q.offer(neig);
            }
        }
        return result && cntOfNeighs == numOfNodes - 1;
    }
} 

C++
class Solution {
public:
    void get(int s,vector<vector<int>> &g,int &y,vector<bool> &v){
        if(v[s])return;
        v[s] = true;
        y++;
        for(auto &i: g[s]){
            get(i,g,y,v);
        }
    }
    void solve(int s,vector<vector<int>> &g,int &x,int &y,vector<bool> &v){
        if(v[s])return;
        v[s] = true;
        for(auto &i: g[s]){
            if(g[i].size() != y)x = 0;
            solve(i,g,x,y,v);
        }
    }
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        vector<vector<int>> g(n);
        vector<bool> v1(n,false),v2(n,false);
        for(auto &i: edges){
            g[i[0]].push_back(i[1]);
            g[i[1]].push_back(i[0]);
        }
        int y = 0,x=0,ans=0;
        for(int i = 0; i < n; i++){
            if(!v1[i]){
                y = -1;
                get(i,g,y,v1);
                x = 1;
                solve(i,g,x,y,v2);
                ans += x;
            }
        }
        return ans;
    }
};
