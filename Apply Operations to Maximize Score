You are given an array nums of n positive integers and an integer k. Initially, you start with a score of 1. You have to maximize your score by applying the following operation at most k times:

Choose any non-empty subarray nums[l, ..., r] that you haven't chosen previously.
Choose an element x of nums[l, ..., r] with the highest prime score. If multiple such elements exist, choose the one with the smallest index.
Multiply your score by x.
Here, nums[l, ..., r] denotes the subarray of nums starting at index l and ending at the index r, both ends being inclusive.

The prime score of an integer x is equal to the number of distinct prime factors of x. For example, the prime score of 300 is 3 since 300 = 2 * 2 * 3 * 5 * 5.

Return the maximum possible score after applying at most k operations. Since the answer may be large, return it modulo 109 + 7.


Example 1:

Input: nums = [8,3,9,3,8], k = 2
Output: 81
Explanation: To get a score of 81, we can apply the following operations:
- Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.
- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.
It can be proven that 81 is the highest score one can obtain.
Example 2:

Input: nums = [19,12,14,6,10,18], k = 3
Output: 4788
Explanation: To get a score of 4788, we can apply the following operations: 
- Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.
- Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.
- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.
It can be proven that 4788 is the highest score one can obtain.
 

Constraints:

1 <= nums.length == n <= 105
1 <= nums[i] <= 105
1 <= k <= min(n * (n + 1) / 2, 109)










Soln :-

Java
class Solution {
    static int MOD = (int)1e9 + 7;
    class MyNum {
        int value;
        int left;
        int right;
        int idx;
        int score;
        MyNum(int v, int l, int r, int i, int s) {
            this.value = v;
            this.left = l;
            this.right = r;
            this.idx = i;
            this.score = s;
        }
    }
    int score(int x) {
        int count = 0;
        if (x % 2 == 0) {
            count++;
            while (x % 2 == 0) {
                x /= 2;
            }
        }

        for (int i = 3; i <= Math.sqrt(x); i += 2) {
            if (x % i == 0) {
                count++;
                while (x % i == 0) {
                    x /= i;
                }
                if (x == 1) {
                    return count;
                }
            }
        }

        if (x > 2) {
            count++;
        }

        return count;
    }
    long power(int x, int p) {
        if (p == 0) {
            return 1;
        }
        long ans = 1;
        if ((p & 1) == 1) {
            ans = x;
        }
        long res = power(x, p >> 1);
        res = (res * res) % MOD;
        ans = (ans * res) % MOD;
        return ans;
    }

    public int maximumScore(List<Integer> nums, int k) {
        int n = nums.size();
        MyNum[] d = new MyNum[n];
        
        for (int i = 0; i < n; i++) {
            d[i] = new MyNum(nums.get(i), i + 1, n - i, i, score(nums.get(i)));
        }

        Stack<Integer> s = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!s.isEmpty() && d[s.peek()].score < d[i].score) {
                int idx = s.pop();
                d[idx].right = i - idx;
            }
            s.push(i);
        }
        s.clear();
        
        for (int i = n - 1; i >= 0; i--) {
            while (!s.isEmpty() && d[s.peek()].score <= d[i].score) {
                int idx = s.pop();
                d[idx].left = idx - i;
            }
            s.push(i);
        }

         
        Arrays.sort(d, (a, b) -> {
            
            return b.value - a.value;
        });
        /
        long ans = 1L;
        for (int i = 0; i < n && k > 0; i++) {
            int ops = d[i].right * d[i].left;
            int realOps = Math.min(k, ops);
            k -= realOps;
            ans = ans * power(d[i].value, realOps) % MOD;
        }
        return (int) ans;
    }
}

C++

constexpr int kMod = 1000'000'007;

vector<int> GetPrimes(int limit) {
  vector<int> not_prime(limit);
  vector<int> primes;
  for (int i = 2; i < limit; ++i) {
    if (not_prime[i]) {
      continue;
    }
    primes.push_back(i);
    for (int j = i * i; j < limit; j += i) {
      not_prime[j] = 1;
    }
  }
  return primes;
}

// 400 * 400 > 10^5
const vector<int> kPrimes = GetPrimes(400);

int PrimeScore(int n) {
  int score = 0;
  for (int p : kPrimes) {
    if (p * p > n) {
      break;
    }
    if (n % p != 0) {
      continue;
    }
    ++score;
    while (n % p == 0) {
      n /= p;
    }
  }
  score += n > 1;
  return score;
}

int ModPow(int64_t a, int x) {
  int64_t r = 1;
  while (x > 0) {
    if (x % 2 == 1) {
      r = r * a % kMod;
    }
    a = a * a % kMod;
    x /= 2;
  }
  return r;
}

class Solution {
public:
  int maximumScore(vector<int>& nums, int k) {
    const int N = nums.size();
    vector<pair<int, int>> score_and_indices;  // A stack for one-pass algorithm
    vector<pair<int, int64_t>> value_and_powers;  // Results of this one-pass algorithm
    for (int i = 0; i < N; ++i) {
      int score = PrimeScore(nums[i]);
      while (!score_and_indices.empty() && score_and_indices.back().first < score) {
        auto [s, index] = score_and_indices.back();
        score_and_indices.pop_back();
        int64_t left = score_and_indices.empty() ? -1 : score_and_indices.back().second;
        value_and_powers.push_back({nums[index], (index - left) * (i - index)});
      }
      score_and_indices.push_back({score, i});
    }
    while (!score_and_indices.empty()) {
      auto [s, index] = score_and_indices.back();
      score_and_indices.pop_back();
      int64_t left = score_and_indices.empty() ? -1 : score_and_indices.back().second;
      value_and_powers.push_back({nums[index], (index - left) * (N - index)});
    }
    
    std::sort(value_and_powers.begin(), value_and_powers.end());
    
    int64_t answer = 1;
    for (int i = value_and_powers.size() - 1; i >= 0 && k > 0; --i) {
      auto [value, power] = value_and_powers[i];
      k -= power;
      if (k < 0) {
        power += k;
      }
      answer = answer * ModPow(value, power) % kMod;
    }
    return answer;
  }
};
