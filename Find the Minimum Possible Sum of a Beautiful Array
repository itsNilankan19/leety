You are given positive integers n and target.
An array nums is beautiful if it meets the following conditions:
nums.length == n.
nums consists of pairwise distinct positive integers.
There doesn't exist two distinct indices, i and j, in the range [0, n - 1], such that nums[i] + nums[j] == target.
Return the minimum possible sum that a beautiful array could have modulo 109 + 7.
 

Example 1:

Input: n = 2, target = 3
Output: 4
Explanation: We can see that nums = [1,3] is beautiful.
- The array nums has length n = 2.
- The array nums consists of pairwise distinct positive integers.
- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.
It can be proven that 4 is the minimum possible sum that a beautiful array could have.

Example 2:

Input: n = 3, target = 3
Output: 8
Explanation: We can see that nums = [1,3,4] is beautiful.
- The array nums has length n = 3.
- The array nums consists of pairwise distinct positive integers.
- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.
It can be proven that 8 is the minimum possible sum that a beautiful array could have.

Example 3:

Input: n = 1, target = 1
Output: 1
Explanation: We can see, that nums = [1] is beautiful.
 

Constraints:

1 <= n <= 109
1 <= target <= 109






Soln :-

Java
class Solution {
    public int minimumPossibleSum(int n, int target) {
        Set<Integer> set = new HashSet<>();
        int i = 1;
        int sum = 0;
        while(set.size() < n){
            if(!set.contains(target-i) && set.add(i))   sum += i;
            i++;
        }
        return sum;
    }
}

C++
class Solution {
public:

    // Sum of AP when first and last terms are known.
    long long getSum(long long n,long long a,long long l) {
        long long sum;
        if(n%2==0){
            sum = (n/2)*(a+l);
        }else{
            sum = ((a+l)/2)*n;
        }
        return sum;
    }

    long long minimumPossibleSum(int n, int target) {

        int a = (target/2);
        int l = target;

        if(a>n) {
            return getSum(n,1,n);
        }
                
        return getSum(a,1,a) + getSum(n-a,l,l+n-a-1);
    }
};
