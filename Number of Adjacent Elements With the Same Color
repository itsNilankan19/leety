There is a 0-indexed array nums of length n. Initially, all elements are uncolored (has a value of 0).
You are given a 2D integer array queries where queries[i] = [indexi, colori]. For each query, you color the index indexi with the color colori in the array nums.
Return an array answer of the same length as queries where answer[i] is the number of adjacent elements with the same color after the ith query.
More formally, answer[i] is the number of indices j, such that 0 <= j < n - 1 and nums[j] == nums[j + 1] and nums[j] != 0 after the ith query.
 

Example 1:

Input: n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]]
Output: [0,1,1,0,2]
Explanation: Initially array nums = [0,0,0,0], where 0 denotes uncolored elements of the array.
- After the 1st query nums = [2,0,0,0]. The count of adjacent elements with the same color is 0.
- After the 2nd query nums = [2,2,0,0]. The count of adjacent elements with the same color is 1.
- After the 3rd query nums = [2,2,0,1]. The count of adjacent elements with the same color is 1.
- After the 4th query nums = [2,1,0,1]. The count of adjacent elements with the same color is 0.
- After the 5th query nums = [2,1,1,1]. The count of adjacent elements with the same color is 2.


Example 2:

Input: n = 1, queries = [[0,100000]]
Output: [0]
Explanation: Initially array nums = [0], where 0 denotes uncolored elements of the array.
- After the 1st query nums = [100000]. The count of adjacent elements with the same color is 0.
 

Constraints:

1 <= n <= 105
1 <= queries.length <= 105
queries[i].length == 2
0 <= indexi <= n - 1
1 <=  colori <= 105






Soln :-


Java
class Solution {
    public int[] colorTheArray(int n, int[][] queries) {
        int count = 0;
        int[] nums = new int[n];
        int[] result = new int[queries.length];
        
        for(int i = 0; i < queries.length; i++) {
            int idx = queries[i][0], val = queries[i][1];
            
            if(idx > 0) {
                if(nums[idx-1] == 0);
                else if(nums[idx] == nums[idx-1]) {
                    if(nums[idx] != val && count > 0) count--;
                }
                else {
                    if(val == nums[idx-1]) count++;
                }
            }
			
            if(idx+1 < n) {
                if(nums[idx+1] == 0);
                else if(nums[idx] == nums[idx+1]) {
                    if(nums[idx] != val && count > 0) count--;
                }
                else {
                    if(val == nums[idx+1]) count++;
                }
            }
            
            nums[idx] = val;
            result[i] = count;
        }
        
        return result;
    }
}

C++
class Solution {
public:
    vector<int> colorTheArray(int n, vector<vector<int>>& queries) {
        vector<int> arr(n, 0), ans;
        int cnt = 0;
        for(auto it : queries)  {
            int ind = it[0], color = it[1];
            if(ind - 1 >= 0 && arr[ind - 1] == arr[ind] && arr[ind] != 0)    cnt--;
            if(ind+1<n && arr[ind+1] == arr[ind] && arr[ind] != 0)  cnt--;
            if(ind - 1 >= 0 && arr[ind - 1] == color)    cnt++;
            if(ind+1<n && arr[ind+1] == color)  cnt++;
            arr[ind] = color;
            ans.push_back(cnt);
        }
        
        return ans;
    }
};
