You are given a 0-indexed integer array nums of length n and an integer k. In an operation, you can choose an element and multiply it by 2.
Return the maximum possible value of nums[0] | nums[1] | ... | nums[n - 1] that can be obtained after applying the operation on nums at most k times. Note that a | b denotes the bitwise or between two integers a and b.
 

Example 1:

Input: nums = [12,9], k = 1
Output: 30
Explanation: If we apply the operation to index 1, our new array nums will be equal to [12,18]. Thus, we return the bitwise or of 12 and 18, which is 30.


Example 2:

Input: nums = [8,1,2], k = 2
Output: 35
Explanation: If we apply the operation twice on index 0, we yield a new array of [32,1,2]. Thus, we return 32|1|2 = 35.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
1 <= k <= 15






Soln :-


Java
class Solution {
	private static final int MAX_BITS = 63;

    public long maximumOr(int[] nums, int k) {
	
        int[] originalBits = new int[MAX_BITS];
        for (int num : nums) {
            for(int i = 0; num > 0; i++){
                if(num%2 == 1) originalBits[i]++;
                num /= 2;
            }
        }

        long max = 0;
        for (int num : nums) {
            int[] bits = Arrays.copyOf(originalBits, MAX_BITS);
             for(int i = 0; num > 0; i++){
                if(num%2 == 1){ 
                    bits[i]--;
                    bits[i+k]++;
                }
                num /= 2;
            }
            long result = 0;
            for (int i = 0; i < MAX_BITS; i++) {
                if(bits[i] > 0) result += (1L << i);
            }
            max = Math.max(result, max);
        }

        return max;

    }
}

C++
class Solution {
public:
    long long maximumOr(vector<int>& nums, int k) {
        int n = nums.size(); 
        vector<int> pre(n, 0), post(n, 0); 
        
        for(int i=1; i<n; i++) pre[i] = (pre[i-1] | nums[i-1]); 
        for(int i = n-2; i>=0; i--) post[i] = (post[i+1] | nums[i+1]); 
        
        long long res = 0; 
        
        for(int i=0; i<n; i++){
            long long num = nums[i]; 
            num *= pow(2, k); 
            res = max(res, pre[i]|num|post[i]);
        }
        return res;
    }
};
