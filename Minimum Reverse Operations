You are given an integer n and an integer p in the range [0, n - 1]. Representing a 0-indexed array arr of length n where all positions are set to 0's, except position p which is set to 1. You are also given an integer array banned containing some positions from the array. For the ith position in banned, arr[banned[i]] = 0, and banned[i] != p.
You can perform multiple operations on arr. In an operation, you can choose a subarray with size k and reverse the subarray. However, the 1 in arr should never go to any of the positions in banned. In other words, after each operation arr[banned[i]] remains 0.
Return an array ans where for each i from [0, n - 1], ans[i] is the minimum number of reverse operations needed to bring the 1 to position i in arr, or -1 if it is impossible.
A subarray is a contiguous non-empty sequence of elements within an array.
The values of ans[i] are independent for all i's.
The reverse of an array is an array containing the values in reverse order.
 

Example 1:

Input: n = 4, p = 0, banned = [1,2], k = 4
Output: [0,-1,-1,1]
Explanation: In this case k = 4 so there is only one possible reverse operation we can perform, which is reversing the whole array. Initially, 1 is placed at position 0 so the amount of operations we need for position 0 is 0. We can never place a 1 on the banned positions, so the answer for positions 1 and 2 is -1. Finally, with one reverse operation we can bring the 1 to index 3, so the answer for position 3 is 1. 


Example 2:

Input: n = 5, p = 0, banned = [2,4], k = 3
Output: [0,-1,-1,-1,-1]
Explanation: In this case the 1 is initially at position 0, so the answer for that position is 0. We can perform reverse operations of size 3. The 1 is currently located at position 0, so we need to reverse the subarray [0, 2] for it to leave that position, but reversing that subarray makes position 2 have a 1, which shouldn't happen. So, we can't move the 1 from position 0, making the result for all the other positions -1. 


Example 3:

Input: n = 4, p = 2, banned = [0,1,3], k = 1
Output: [-1,-1,0,-1]
Explanation: In this case we can only perform reverse operations of size 1. So the 1 never changes its position.
 

Constraints:

1 <= n <= 105
0 <= p <= n - 1
0 <= banned.length <= n - 1
0 <= banned[i] <= n - 1
1 <= k <= n 
banned[i] != p
all values in banned are unique 






Soln :-


Java
class Solution {
    int INF = 1000000000;
    public int[] minReverseOperations(int n, int s, int[] banned, int k) {
        int d[] = new int[n];
        Arrays.fill(d, INF);
        boolean is[] = new boolean[n];
        for(int i : banned) is[i] = true;
        
        TreeSet<Integer> odd = new TreeSet<>();
        TreeSet<Integer> even = new TreeSet<>();
        for(int i = 0; i < n; i++) {
            if(!is[i] && i != s) {
                if(i % 2 == 0) even.add(i);
                else odd.add(i);
            }
        }
		
        Queue<Integer> q = new LinkedList<>();
        q.add(s);
        d[s] = 0;
        while(q.size() > 0) {
            int u = q.poll();
            int l = u;
            int r = u;
            
            int ll = Math.max(0, u - k + 1);
            int rr = ll + k - 1;
            if(rr < n) {
                int ith = u - ll;
                l = ll + (k - ith - 1);
            }
            
            int rrr = Math.min(n - 1, u + k - 1);
            int lll = rrr - k + 1;
            if(lll >= 0) {
                int ith = u - lll;
                r = lll + (k - ith - 1);
            }
            
            
            TreeSet<Integer> tree;
         
            if(u % 2 == 0) {
                if(k % 2 == 0) tree = odd;
                else tree = even;
            } else {
                if(k % 2 == 0) tree = even;
                else tree = odd;
            }
            
            while(true) {
                Integer hi = tree.ceiling(l);
                if(hi == null) break;

                if(hi <= r) {
                    d[hi] = d[u]  + 1;
                    q.add(hi);
                    tree.remove(hi);
                } else {
                    break;
                }
            }
            
            while(true) {
                Integer lo = tree.floor(r);
                if(lo == null) break;
                if(lo >= l) {
                    d[lo] = d[u] + 1;
                    tree.remove(lo);
                    q.add(lo);
                } else {
                    break;
                }
            }
        }
       
        for(int i = 0; i < n; i++) {
            if(d[i] == INF) d[i] = -1;
        }
        return d;
    }
}

C++
class Solution {
public:
    vector<int> minReverseOperations(int n, int p, vector<int>& banned, int k) {
        vector<int> r(n, -1);
        r[p] = 0;
        if (k == 1 || n == 1) {
            return r;
        }
        unordered_set<int> all;
        for (int i = 0; i < n; ++i) {
            all.insert(i);
        }
        all.erase(p);
        for (int x : banned) {
            all.erase(x);
        }
        vector<set<int>> s(2);
        for (int x : all) {
            s[x & 1].insert(x);
        }
        queue<int> q;
        for (q.push(p); !q.empty(); ) {
            p = q.front();
            q.pop();
            const int left = max(0, p + k - n), right = min(p, k - 1);
            if (left > right) {
                continue;
            }
            const int v1 = k + p - 1 - right - right;
            const int v2 = k + p - 1 - left - left;
            const int ind = v1 & 1;
            for (auto t = s[ind].lower_bound(v1); t != s[ind].end(); ) {
                if (*t > v2) {
                    break;
                }
                r[*t] = r[p] + 1;
                q.push(*t);
                s[ind].erase(t++);
            }
            
        }
        return r;
        
    }
};
