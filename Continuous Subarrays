You are given a 0-indexed integer array nums. A subarray of nums is called continuous if:
Let i, i + 1, ..., j be the indices in the subarray. Then, for each pair of indices i <= i1, i2 <= j, 0 <= |nums[i1] - nums[i2]| <= 2.
Return the total number of continuous subarrays. A subarray is a contiguous non-empty sequence of elements within an array.


Example 1:

Input: nums = [5,4,2,4]
Output: 8
Explanation: 
Continuous subarray of size 1: [5], [4], [2], [4].
Continuous subarray of size 2: [5,4], [4,2], [2,4].
Continuous subarray of size 3: [4,2,4].
Thereare no subarrys of size 4.
Total continuous subarrays = 4 + 3 + 1 = 8.
It can be shown that there are no more continuous subarrays.
 

Example 2:

Input: nums = [1,2,3]
Output: 6
Explanation: 
Continuous subarray of size 1: [1], [2], [3].
Continuous subarray of size 2: [1,2], [2,3].
Continuous subarray of size 3: [1,2,3].
Total continuous subarrays = 3 + 2 + 1 = 6.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109







Soln :-


Java
class Solution {
    public long continuousSubarrays(int[] nums) {
        TreeMap<Integer,Integer> map = new TreeMap<>();
        int i=0,j=0;
        long ans=0;
        while(i<nums.length){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
            i++;
        while(Math.abs(map.firstEntry().getKey()-map.lastEntry().getKey())>2){
            map.put(nums[j],map.getOrDefault(nums[j],0)-1);
            if(map.get(nums[j])==0){
                map.remove(nums[j]);
            }
            j++;
        }
        ans+=i-j;
        }
        return ans;
    }
}

C++
class Solution {
public:
    long long continuousSubarrays(vector<int>& nums) {
        int n = nums.size(); 
        int m = 31 - __builtin_clz(n); 
        vector<vector<int>> dpmn(n, vector<int>(m + 1, INT_MAX)); 
        vector<vector<int>> dpmx(n, vector<int>(m + 1, INT_MIN)); 
        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j < m + 1; j++) {
                if (j == 0) {
                    dpmn[i][j] = nums[i];
                    dpmx[i][j] = nums[i];
                }
                else {
                    int i2 = i + (1 << (j - 1));
                    dpmn[i][j] = min(dpmn[i][j - 1], i2 < n ? dpmn[i2][j - 1] : INT_MAX);
                    dpmx[i][j] = max(dpmx[i][j - 1], i2 < n ? dpmx[i2][j - 1] : INT_MIN);
                }
            }
        }
        auto getmin = [&](int l, int r) {
            int len = r - l + 1;
            int x = 31 - __builtin_clz(len);
            return min(dpmn[l][x], dpmn[r - (1 << x) + 1][x]);
        };
        
        auto getmax = [&](int l, int r) {
            int len = r - l + 1;
            int x = 31 - __builtin_clz(len);
            return max(dpmx[l][x], dpmx[r - (1 << x) + 1][x]);
        };
        

        long long ans = 0;
        
        for (int i = 0; i < n; i++) {

            int lo = i, hi = n - 1; 
            while (hi - lo > 1) {
                int mid = (hi + lo) / 2;
                
                int mn = getmin(i, mid); 
                int mx = getmax(i, mid); 
                
                if (mx - mn <= 2)
                    lo = mid;
                else
                    hi = mid - 1;
            }
            int r = lo;
            int mn = getmin(i, hi); 
            int mx = getmax(i, hi); 
            if (mx - mn <= 2)
                r = hi;
            
            ans += r - i + 1; 
        }
        
        return ans; 
    }
};
