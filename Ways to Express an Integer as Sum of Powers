Given two positive integers n and x. Return the number of ways n can be expressed as the sum of the xth power of unique positive integers, in other words, the number of sets of unique integers [n1, n2, ..., nk] where n = n1x + n2x + ... + nkx.
Since the result can be very large, return it modulo 109 + 7. For example, if n = 160 and x = 3, one way to express n is n = 23 + 33 + 53.
 

Example 1:

Input: n = 10, x = 2
Output: 1
Explanation: We can express n as the following: n = 32 + 12 = 10.
It can be shown that it is the only way to express 10 as the sum of the 2nd power of unique integers.


Example 2:

Input: n = 4, x = 1
Output: 2
Explanation: We can express n in the following ways:
- n = 41 = 4.
- n = 31 + 11 = 4.
 

Constraints:

1 <= n <= 300
1 <= x <= 5






Soln :-

Java
public class Solution {
    private static final int MOD = 1000000007;

    public int numberOfWays(int n, int x) {
        int maxNum = (int) Math.pow(n, 1.0 / x) + 1;
        int[][] dp = new int[maxNum + 1][n + 1];

        for (int i = 0; i <= maxNum; i++) {
            dp[i][0] = 1;
        }

        for (int i = 1; i <= maxNum; i++) {
            for (int j = 1; j <= n; j++) {
                if (j < Math.pow(i, x)) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - (int)Math.pow(i, x)]) % MOD;
                }
            }
        }
        return dp[maxNum][n];
    }
}

C++
class Solution {
public:
    int mod= 1e9+7;
    int helper(int base,int n, int x,vector<vector<int>>&dp){
        if(n<0) return 0;
        if(dp[base][n]!=-1) return dp[base][n];
        int val= pow(base,x);
        if(val>n) return 0;
        if(val==n) return 1;
        int pick= helper(base+1,n-val,x,dp);
        int notpick= helper(base+1,n,x,dp);
        return dp[base][n]= (pick%mod+ notpick%mod)%mod;
    }
    int numberOfWays(int n, int x) {
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        return helper(1,n,x,dp);
        
    }
};

